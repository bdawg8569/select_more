<?php

/** testing out a menu item **/
function select_more_menu() {
	$items['testpage'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('select_more_testpage'),
		'access callback' => TRUE,
    	'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function select_more_testpage($form, &$form_state, $key = '') {
	$form['selectit'] = array(
		'#type' => 'select_more',
		'#title' => 'any ole title',
		'#description' => 'you need to fill in this field',
		'#default_value' => variable_get('selectit', array()),
		'#select_title' => 'My Title',
		'#required' => TRUE,
	);
	$defaults = array(
			'value1' => array(
					'selection' => 'on',
					'description' => 'tis default value one',
				),
			'value2' => array(
					'selection' => 'off',
					'description' => '',
				),
			'value3' => array(
					'selection' => 'on',
					'description' => 'yeah buddy this is it!',
				),
		);
	$form['select_lots'] = array(
		'#type' => 'select_more_multiple',
		'#title' => 'test title',
	    '#default_value' => variable_get('select_lots', $defaults),
		'#required' => TRUE,
		'#data' => array(
			'value1' =>  'The value of item 1',
			'value2' =>  'Title on element 2!',
			'value3' =>  'the last title',
		),
	);  
	$form = system_settings_form($form);
	$form['#submit'][] = 'select_more_testpage_submit';
	return $form;
}

function select_more_testpage_submit($form, &$form_state) {
	//kpr($form_state);	
	//exit();
}



/**
 * Implements hook_element_info().
 *
 * Define a new forms api element
 */
function select_more_element_info() {
	$types['select_more'] = array(
		'#input' => TRUE,
		'#process' => array('select_more_module_process'),
		'#theme' => array('select_more_element'),
		'#theme_wrappers' => array('form_element'),
		'#autocomplete_path' => FALSE,
	);
	$types['select_more_multiple'] = array(
		'#input' => TRUE,
		'#process' => array('select_more_multiple_module_process'),
		'#theme' => array('select_more_multiple_element'),
		'#theme_wrappers' => array('form_element'),
		'#autocomplete_path' => FALSE,
	);
	return $types;
}


/**
 * Implements hook_theme().
 */
function select_more_theme() {
  return array(
    'select_more_element' => array(
      'render element' => 'element',
    ),
	'select_more_multiple_element' => array(
	  'render element' => 'element',
	),
  );
}

/**
 * Theme function for select_more_element.
 */

function theme_select_more_element($vars) {
  $element = $vars['element'];
  $output = '';
  $output .= '<div class="wrapper-outer">';
  $output .= '<div class="wrapper-inner">';
  $output .= drupal_render($element['selection']);
  $output .= drupal_render($element['description']);
  $output .= '</div></div>';
  return $output;
 
}

/**
 * Theme function for select_more_multiple_element.
 */

function theme_select_more_multiple_multiple_element($vars) {
  $element = $vars['element'];
  $output = '';
  $output .= '<div class="wrapper-outer">';
  $output .= '<div class="wrapper-inner">';
  $output .= drupal_render($element['selection']);
  $output .= drupal_render($element['description']);
  $output .= '</div></div>';
  return $output;
 
}

/**
 * Select More element processor.
 */
function select_more_module_process($element, $form_state, $complete_form) {
	$element['#tree'] = TRUE;
	$element['#element_validate'][] = 'select_more_element_validate';
		
	$element['selection'] = array(
		'#type' => 'checkbox',
		'#title' => (isset($element['#data']['title'])) ? $element['#data']['title'] : $element['#select_title'],
		'#return_value' => (isset($element['#data']['key'])) ? $element['#data']['key'] : $element['#title'],
		'#default_value' => (isset($element['#default_value']['selection'])) ? $element['#default_value']['selection'] : NULL,
	);
	$element['description'] = array(
		'#type' => 'textarea',
		'#title' => '',
		'#default_value' => isset($element['#default_value']['description']) ? $element['#default_value']['description'] : '',
	);	
	drupal_add_js(drupal_get_path('module', 'select_more').'/select_more.js');
  $id_parts = array();
  foreach ($element['#array_parents'] as $parent) {
    $id_parts[] = str_replace('_', '-', $parent);
  }
  if (!empty($element['#data']['selection'])) {
    //$id_parts[] = $element['#data']['selection']; // @TODO, this should really be #default_value, but it's not being set.
  }
  drupal_add_js(array(
    'selectMore' => array(
      implode($id_parts, '-'),
    ),
  ), 'setting');
	return $element;
}

/**
 * Select More Multiple element processor.
 */
function select_more_multiple_module_process($element, $form_state, $complete_form) {
	
  $value = is_array($element['#value']) ? $element['#value'] : array();
  $element['#element_validate'][] = 'select_more_multiple_element_validate';
  $element['#tree'] = TRUE;
  
  //loop thru all the items in the default values hash, each key is the value to be used
  // for the checkbox and also contains keys for setting the default values for the state
  // of the checkbox and the description
  if (count($element['#default_value']) > 0) {
	
   $weight = 0;
   
   foreach ($element['#default_value'] as $key => $choice) {
      // Integer 0 is not a valid #return_value, so use '0' instead.
      if ($key === 0) {
        $key = '0';
      }
	  
	  //convert default values of "on" to the key of the array so that core
	  //will give it the "checked" property
	  if($choice['selection'] === 'on') {
		$choice['selection'] = $key;
	  }
      // Maintain order of options as defined in #data, in case the element
      // defines custom option sub-elements, but does not define all option
      // sub-elements.
      $weight += 0.001;
	   
      $element += array($key => array());
	  
	  //set default values for each individual select_more control
	  $defaults = array(
	  		'selection' => $choice['selection'],
			'description' => $choice['description'],
		);
	  
      $element[$key] += array(
        '#type' => 'select_more',
        '#default_value' => $defaults,
        '#attributes' => $element['#attributes'],
        '#ajax' => isset($element['#ajax']) ? $element['#ajax'] : NULL,
        '#weight' => $weight,
		//#data provides a way to pass info to the individual select more process that will pass
		// the info to the checkbox and textarea
		'#data' => array(
		  'title'     => isset($element['#data'][$key]) ? $element['#data'][$key] : '',
          'key' => $key,
		  'selection' => isset($value[$key]) ? $key : NULL,
          'description' => isset($value['description']) ? $value['description'] : NULL,
        ),
      );
    } 
  }
  return $element;
}

/**
 Validate an individual select_more element. This is used to make sure that
 a user doesn't try to save information in a textarea without having the corresponding
 checkbox checked. 
**/
function select_more_element_validate($element, &$form_state, $form) {	
	if(!isset($element['#value']['selection']) && !(empty($element['#value']['description']))) {
		form_error($element, t('You must have a value for every checked box. Either add a description to the checked item, or uncheck it to discard it.'));
	}
	if($element['#required'] == TRUE && !isset($element['#value']['selection'])) {
		form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
	} 
}

/**
 Validate an overall select more multiple element
 Used to make sure a selection was made if the field is required. 
*/
function select_more_multiple_element_validate($element, &$form_state, $form) {
	//make sure that if the field is required, that atleast one checkbox is selected
	if($element['#required'] == TRUE) {
		$selected = FALSE;
		foreach($element['#value'] as $item) {
			//if selection is set, a selection was made, change to true
			if(isset($item['selection'])) {
				$selected = TRUE;	
			}
		}
		if($selected == FALSE) {
			form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
		}
		
	} 
}

/************************************************************************************
**			FIELD HOOKS AND HELPERS
************************************************************************************/

/**
 * Implements hook_field_info().
 */
function select_more_field_info() {
	return array(
		'select_more_multiple' => array(
	  		'label' => t('Select More Multiple'),
	  		'description' => t("This field stores text values from a list of allowed 'value => label' pairs and provides a description field with each item as well, i.e. 'US States': IL => Illinois, IA => Iowa, IN => Indiana."),
	  		'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
	  		'default_widget' => 'select_more_multiple',
	  		'default_formatter' => 'select_more_default',
		),
	);
}
	
/**
 * Implements hook_field_settings_form().
 */
function select_more_field_settings_form($field, $instance, $has_data) {
	$settings = $field['settings'];

	$form['allowed_values'] = array(
		'#type' => 'textarea',
		'#title' => t('Allowed values list'),
		'#default_value' => select_more_allowed_values_string($settings['allowed_values']),
		'#rows' => 10,
		'#element_validate' => array('select_more_allowed_values_setting_validate'),
		'#field_has_data' => $has_data,
		'#field' => $field,
		'#field_type' => $field['type'],
		'#access' => empty($settings['allowed_values_function']),
	);
	
	$description = '<p>' . t('The possible values this field can contain. Enter one value per line, in the format key|label.');
	$description .= '<br/>' . t('The key is the stored value. The label will be used in displayed values and edit forms.');
	$description .= '<br/>' . t('The label is optional: if a line contains a single string, it will be used as key and label.');
	$description .= '</p>';
	$form['allowed_values']['#description'] = $description;

     

  // Alter the description for allowed values depending on the widget type.
  $form['allowed_values']['#description'] .= '<p>' . t('Allowed HTML tags in labels: @tags', array('@tags' => _field_filter_xss_display_allowed_tags())) . '</p>';

  $form['allowed_values_function'] = array(
    '#type' => 'value',
    '#value' => $settings['allowed_values_function'],
  );
  $form['allowed_values_function_display'] = array(
    '#type' => 'item',
    '#title' => t('Allowed values list'),
    '#markup' => t('The value of this field is being determined by the %function function and may not be changed.', array('%function' => $settings['allowed_values_function'])),
    '#access' => !empty($settings['allowed_values_function']),
  );

  return $form;
}

/**
 * Element validate callback; check that the entered values are valid.
 */
function select_more_allowed_values_setting_validate($element, &$form_state) {
  $field = $element['#field'];
  $has_data = $element['#field_has_data'];
  $field_type = $field['type'];
  $generate_keys =  !$has_data;

  $values = select_more_extract_allowed_values($element['#value'], $field['type'], $generate_keys);

  if (!is_array($values)) {
    form_error($element, t('Allowed values list: Not Valid input.'));
  }
  else {
    // Check that keys are valid for the field type.
    foreach ($values as $key => $value) {
	  if ($field_type == 'select_more_text' && drupal_strlen($key) > 255) {
        form_error($element, t('Allowed values list: each key must be a string at most 255 characters long.'));
        break;
      }
    }

    // Prevent removing values currently in use.
    if ($has_data) {
      $lost_keys = array_diff(array_keys($field['settings']['allowed_values']), array_keys($values));
      if (_select_more_values_in_use($field, $lost_keys)) {
        form_error($element, t('Allowed values list: some values are being removed while currently in use.'));
      }
    }

    form_set_value($element, $values, $form_state);
  }
}

/**
 * Returns the array of allowed values for a list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through field_filter_xss() before being displayed.
 *
 * @param $field
 *   The field definition.
 *
 * @return
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 */
function select_more_allowed_values($field) {
  $allowed_values = &drupal_static(__FUNCTION__, array());

  if (!isset($allowed_values[$field['id']])) {
    $function = $field['settings']['allowed_values_function'];
    if (!empty($function) && function_exists($function)) {
      $values = $function($field);
    }
    else {
      $values = $field['settings']['allowed_values'];
    }

    $allowed_values[$field['id']] = $values;
  }

  return $allowed_values[$field['id']];
}

/**
 * Parses a string of 'allowed values' into an array.
 *
 * @param $string
 *   The list of allowed values in string format descibed in
 *   list_allowed_values_string().
 * @param $field_type
 *   The field type. Either 'list_number' or 'list_text'.
 * @param $generate_keys
 *   Boolean value indicating whether to generate keys based on the position of
 *   the value if a key is not manually specified, and if the value cannot be
 *   used as a key. This should only be TRUE for fields of type 'list_number'.
 *
 * @return
 *   The array of extracted key/value pairs, or NULL if the string is invalid.
 *
 * @see list_allowed_values_string()
 */
function select_more_extract_allowed_values($string, $field_type, $generate_keys) {
  $values = array();

  $list = explode("\n", $string);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
	
  $generated_keys = $explicit_keys = FALSE;
  foreach ($list as $position => $text) {
    $value = $key = FALSE;
    // Check for an explicit key.
    $matches = array();
    if (preg_match('/(.*)\|(.*)/', $text, $matches)) {
	  //for the Javascript to work correct, keys must not have spaces
      $key = str_replace(' ', '_', $matches[1]);
      $value = $matches[2];
      $explicit_keys = TRUE;
    }
    // Otherwise see if we can use the value as the key. Detecting true integer
    // strings takes a little trick.
    elseif ($field_type == 'select_more_text' || $field_type  == 'select_more_multiple') {
      $key = $value = $text;
	  //for the Javascript to work correct, keys must not have spaces
	  $key = str_replace(' ', '_', $key);
      $explicit_keys = TRUE;
    }
    // Otherwise see if we can generate a key from the position.
    elseif ($generate_keys) {
      $key = (string) $position;
      $value = $text;
      $generated_keys = TRUE;
    }
    else {
      return;
    }

    $values[$key] = $value;
  }

  // We generate keys only if the list contains no explicit key at all.
  //if ($explicit_keys && $generated_keys) {
    //return;
  //}
  return $values;
}

/**
 * Generates a string representation of an array of 'allowed values'.
 *
 * This string format is suitable for edition in a textarea.
 *
 * @param $values
 *   An array of values, where array keys are values and array values are
 *   labels.
 *
 * @return
 *   The string representation of the $values array:
 *    - Values are separated by a carriage return.
 *    - Each value is in the format "value|label" or "value".
 */
function select_more_allowed_values_string($values) {
  $lines = array();
  foreach ($values as $key => $value) {
    $lines[] = "$key|$value";
  }
  return implode("\n", $lines);
}

/**
 * Checks if a list of values are being used in actual field values.
 */
function _select_more_values_in_use($field, $values) {
  if ($values) {
    $query = new EntityFieldQuery();
    $found = $query
      ->fieldCondition($field['field_name'], 'value', $values)
      ->range(0, 1)
      ->execute();
    return !empty($found);
  }

  return FALSE;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'list_illegal_value': The value is not part of the list of allowed values.
 */
function select_more_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = select_more_allowed_values($field);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($allowed_values) && !isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'list_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => t($instance['label']))),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function select_more_field_is_empty($item, $field) {
  if (empty($item['selection']) && (string) $item['selection'] !== '0') {
   $return = TRUE;
  }
  else {
  	$return = FALSE;
  }

  return $return;
  
}


/************************************************************************************
**			SELECT MORE WIDGETS AND FORMATTERS
************************************************************************************/

/**
 * Implements hook_field_widget_info().
 */
function select_more_field_widget_info() {
  return array(
	  'select_more_multiple' => array(
      'label' => t('Select More Multiple'),
      'field types' => array('select_more_multiple'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function select_more_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Abstract over the actual field columns, to allow different field types to
  // reuse those widgets.
  $value_key = key($field['columns']);

  //information needed by the options module
  $type = $instance['widget']['type'];
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _options_properties($type, $multiple, $required, $has_value);

  // Prepare the list of options.
  $options = _options_get_options($field, $instance, $properties);


	switch($type) {
		case 'select_more_multiple':
		  $default_values = array();
		  $i = 0;
			foreach($options as $key => $option) {
        if (!empty($items[$i])) {
          $default_values[$key] = array(
            'selection' => $items[$i]['selection'],
            'description' => $items[$i]['description'],
          );
        }
        else {
          $default_values[$key] = array(
            'selection' => 0,
            'description' => '',
          );
        }
        $i++;
			}
			$element += array(
				'#type' => 'select_more_multiple', 
				'#default_value' => $default_values,
				'#data' => $options,
			);
	 	break;

	}

  $element += array(
    '#value_key' => $value_key,
  );

  return $element;
}

/**
 * Implements hook_options_list().
 */
function select_more_options_list($field) {
  return select_more_allowed_values($field);
}

/**
 * Implements hook_field_formatter_info().
 */
function select_more_field_formatter_info() {
  return array(
    'select_more_default' => array(
      'label' => t('Values and Description'),
      'field types' => array('select_more_multiple'),
    ),
	'select_more_values' => array(
      'label' => t('Values Only (no descriptions)'),
      'field types' => array('select_more_multiple'),
    ),
    'select_more_key' => array(
      'label' => t('Keys Only (from checkboxes)'),
      'field types' => array('select_more_multiple'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function select_more_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'select_more_default':
      $allowed_values = select_more_allowed_values($field);
      foreach ($items as $delta => $item) {
		//only if the checkbox is 'on'
		if($item['selection'] != '0') {
			if (isset($allowed_values[$item['selection']])) {
			  $output = field_filter_xss($allowed_values[$item['selection']]);
			  if(!empty($item['description'])) {
			  	$output .= '<br />'.field_filter_xss($item['description']);
			  }
			}
		$element[$delta] = array('#markup' => $output);
		}	
        
      }
      break;
	case 'select_more_values':
      $allowed_values = select_more_allowed_values($field);
      foreach ($items as $delta => $item) {
		//only if the checkbox is 'on'
		if($item['selection'] != '0') {
			if (isset($allowed_values[$item['selection']])) {
			  $output = field_filter_xss($allowed_values[$item['selection']]);
			}
		$element[$delta] = array('#markup' => $output);
		}	
        
      }
      break;
	  
    case 'select_more_key':
      foreach ($items as $delta => $item) {
		  //only if the checkbox is 'on'
		  if($item['selection'] != '0') {
        	$element[$delta] = array('#markup' => field_filter_xss($item['selection']));
		  }
      }
      break;
  }

  return $element;
}
